package leetcode;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.IconifyAction;

/*
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。

示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

 * 
 * 
 * */

public class removeDuplicates0 {
	
	
	public int removeDuplicates(int[] num){

		if(num == null || num.length == 0 ){
			return 0;
		}else if (num.length == 1) {
			return 1;
		}else {
			int changex = 0;
			int len = 1;
			changex = num[0];
			for(int i = 1 ; i < num.length ; i++){
				if(changex == num[i]){
					continue;
				}
				changex = num[i];
				num[len] = changex;
				len++;
				
			}
			return len;
			
		}
		

		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		removeDuplicates0 xremoveDuplicates0 = new removeDuplicates0();
		
		int[] num = {1,1,2};
		int x = xremoveDuplicates0.removeDuplicates(num);
		System.out.println(x);
		for(int i = 0; i < x ; i++){
			System.out.println(num[i]);
		}
	}

}
